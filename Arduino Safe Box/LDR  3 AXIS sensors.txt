//--Designed for CHUK-IE IERG4230 course
//--2016.01.20
//--Copyright reserved
#include <Arduino.h>
#include <SoftwareSerial.h>
#include <Wire.h>
SoftwareSerial xBeeSerial(9, 8); //RX=9, TX=8, use software for to XBee
#include "IERG4230.h"


// === start #define =============================================================
#define debugPerformance            //Comment it 
#define YunI2CAddress  0x18         //Dont modify, YUN I2C address
#define xbeeI2CAddress 0x27         //Dont modify, XBee I2C address
#define keyI2CAddress  0x23         //Dont modify, 16-key keypade I2C address
#define lcdI2CAddress  0x26         //Dont modify, LCD I2C address
unsigned long performanceCounter;                 //Dont modify, for performance test
char  xbeeId0, xbeeId1;               // variable stores XBee ID fro DIP switches
char keyI2Cdata0, keyI2Cdata1;        //variables store current 16-key keypad status
char keyI2Cdata0old, keyI2Cdata1old;  //variables store pervious 16-key keypad status
char keyI2Cchanged;                   //variable indicates keypad is changed
LcdI2C8Bit Lcd(lcdI2CAddress);        //Dont modify, create object LCD
osEvent task0;                        //Dont modify, for performance test
// ===== end of #include, #define, essential object and golbal variables  ===========
// ===== create user defined objects
osEvent task1, task2, task3, task4, task5, task6, task7, task8, task9, task10; //10 tasks object are created for used.
dOut led1(3), led2(5), led3(6);      //create objects, three on board LEDs as digital outputs
dIn sw11(2), sw12(7);                //create objects, two on board switches as digital inputs.
aIn aI0(A0), aI1(A1), aI2(A2), aI3(A3), aI6(A6), aI7(A7); //create object, six analog inputs
aOut led1a(3), led2a(5), led3a(6); //create objects, three on board LEDs as analog PWM outputs
// == add your golbal variables below ==
//int temp_i;
////////////////////////////////////////////////////////////////
void setup()
{
  delay(100);
  Wire.begin(); //start I2C bus, default 9600
  I2CRead2Byte(xbeeI2CAddress, &xbeeId0, &xbeeId1);  //read ID for XBee
  I2CRead2Byte(keyI2CAddress, &keyI2Cdata0old, &keyI2Cdata1old);
  keyI2Cchanged = 0;
  Serial.begin(9600);   //enable hwUART
  xBeeSerial.begin(9600); //enable swUART
  osEvent::osTimer = millis();
  Lcd.setUp();
  //=== dont modify above setup
  //=== user can start task at starting

  task0.timerSet(100); //performance check start after 100ms
  task2.timerSet(100);  //task1 stast after 100ms
 

}

void loop()
{
  while (Serial.available())
  {
    //read data from hardware buffer
  } 
  while (xBeeSerial.available())
  {
    //read data from software buffer
  }
  performanceCounter++; //dont remove, for performace test
  hal_eventUpdate();               //check Hardware events
  if (osEvent::osTimer != millis()) timeStampUpdate();
 // if (task0.isSet()) task0_handler();  //for performance test
  //---- dont modify above lines, user add own task handlers below ---
 // if (task1.isSet()) task1_handler(); //when task-1 timeout
//    if (sw11.eventDown) sw11_downHandler();
//    if (sw11.eventUp) sw11_upHandler();
//    if (task2.isSet()) task2_handler();
//    if (task3.isSet()) task3_handler();
    if (task4.isSet()) task4_handler();
  
  if (aI7.value < 400) aI7_low_handler();
  if (aI7.value > 600) aI7_high_handler();

  
//    if (keyI2Cchanged) keyI2C_handler();

}
//----------------------------------------
//--- user's add handlers and subroutines below here
void aI7_low_handler()  //LED1 flashing
{
digitalWrite(5, LOW);
  
}
void aI7_high_handler()  //LED1 flashing
{
digitalWrite(5, HIGH);
  
}
//void sw11_downHandler(void) // when SW11 Down
//{
//  task3.clean();
//  sw11.eventDown=0;
//}
void task4_handler()
{
  task4.clean();
  Lcd.showFigure(1,0,5,aI0.value);
  Lcd.showFigure(1,6,5,aI1.value);
  Lcd.showFigure(1,12,5,aI2.value);
 Lcd.showFigure(3,0,5,aI7.value);
  task4.timerSet(1000);
}
// --- user LCD handlers ----
void LCDshwoWelcomePage(void)
{/*
  Lcd.displayString(0, " CUHK-IE  IERG4230  ");
  Lcd.displayString(1, "                    ");
  Lcd.displayString(2, "                    ");
  Lcd.displayString(3, "....................");
*/
}
//-------------------  basic OS subroutines -------------------
//---You may need to modify them if you change the hardware ---
void hal_eventUpdate(void)
{
  //==read I2C 16key keypad
  I2CRead2Byte(keyI2CAddress, &keyI2Cdata0, &keyI2Cdata1);
  if (keyI2Cdata0 != keyI2Cdata0old) keyI2Cchanged = 1;
  if (keyI2Cdata1 != keyI2Cdata1old)  keyI2Cchanged = 1;
  keyI2Cdata0old = keyI2Cdata0;
  keyI2Cdata1old = keyI2Cdata1;
  //==end of read I2C 16key keypad
  //== comment/uncomment the followings for used hardware
  sw11.dataUpdate();
  sw12.dataUpdate();
  aI0.dataUpdate();
  aI1.dataUpdate();
  aI2.dataUpdate();
  //aI3.dataUpdate();
  //aI6.dataUpdate();
  aI7.dataUpdate();  
}

void timeStampUpdate(void)   // no need to modify this function unless you know what you are doing.
{
  int i;
  unsigned long temp;
  temp = millis();
  if (osEvent::osTimer > temp) i = 1;
  else i = (int)(temp - osEvent::osTimer);
  osEvent::osTimer = temp;
  //---- user add their own tasks if necessary
  task0.timerUpdate(i);
  task1.timerUpdate(i);
  task2.timerUpdate(i);
  task3.timerUpdate(i);
  task4.timerUpdate(i);
  task5.timerUpdate(i);
  task6.timerUpdate(i);
  task7.timerUpdate(i);
  task8.timerUpdate(i);
  task9.timerUpdate(i);
  task10.timerUpdate(i);  
}

void task0_handler() // Dont modify, for performace test
{ 
  task0.clean();
  #ifdef debugPerformance
    Serial.println(performanceCounter);
  #endif
  performanceCounter = 0;
  task0.timerSet(1000);

}
//====  End of OS ========================

